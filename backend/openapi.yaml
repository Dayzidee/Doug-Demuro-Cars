openapi: 3.1.0
info:
  title: Professional Car Dealership API
  version: "1.0.0"
  description: |
    API for the Professional Car Dealership Platform.
    Handles vehicle inventory, user management, financing applications, and administrative tasks.
servers:
  - url: /api/v1
    description: API Version 1

# 1. Paths (Endpoints)
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh an authentication token
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Log out a user
      security:
        - bearerAuth: []
      responses:
        '204':
          description: User successfully logged out

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get the current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles:
    get:
      tags:
        - Vehicles
      summary: List and filter vehicles
      parameters:
        - name: make
          in: query
          schema:
            type: string
        - name: model
          in: query
          schema:
            type: string
        - name: year_min
          in: query
          schema:
            type: integer
        - name: year_max
          in: query
          schema:
            type: integer
        - name: price_min
          in: query
          schema:
            type: number
        - name: price_max
          in: query
          schema:
            type: number
        - name: sort_by
          in: query
          schema:
            type: string
            enum: [price_asc, price_desc, year_asc, year_desc, mileage_asc]
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: A paginated list of vehicles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
    post:
      tags:
        - Vehicles
      summary: Create a new vehicle (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleCreate'
      responses:
        '201':
          description: Vehicle created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid input
        '403':
          description: Forbidden

  /vehicles/{id}:
    get:
      tags:
        - Vehicles
      summary: Get a vehicle by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: A single vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Vehicle not found
    patch:
      tags:
        - Vehicles
      summary: Update a vehicle (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VehicleUpdate'
      responses:
        '200':
          description: Vehicle updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        '404':
          description: Vehicle not found
    delete:
      tags:
        - Vehicles
      summary: Delete a vehicle (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Vehicle deleted
        '404':
          description: Vehicle not found

  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    patch:
      tags:
        - User
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'

# 2. Components (Reusable Schemas)
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
          format: int32

    UserRegister:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        full_name:
          type: string
      required:
        - email
        - password

    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/Profile'

    Profile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        full_name:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: ['customer', 'staff', 'manager', 'admin']
        avatar_url:
          type: string
          format: uri
        preferences:
          type: object

    ProfileUpdate:
      type: object
      properties:
        full_name:
          type: string
        phone:
          type: string
        avatar_url:
          type: string
          format: uri
        preferences:
          type: object

    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        vin:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        price_current:
          type: number
          format: float
        mileage:
          type: integer
        body_type:
          type: string
          enum: ['Sedan', 'SUV', 'Truck', 'Hatchback', 'Coupe', 'Convertible', 'Minivan', 'Wagon']
        status:
          type: string
          enum: ['Available', 'Sold', 'Pending', 'Reserved', 'In-maintenance']
        # ... other vehicle fields from schema
      required:
        - id
        - vin
        - make
        - model
        - year
        - price_current

    VehicleCreate:
      type: object
      properties:
        vin:
          type: string
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        price_current:
          type: number
          format: float
      # ... etc.
      required:
        - vin
        - make
        - model
        - year
        - price_current

    VehicleUpdate:
      type: object
      properties:
        price_current:
          type: number
          format: float
        status:
          type: string
          enum: ['Available', 'Sold', 'Pending', 'Reserved', 'In-maintenance']
      # ... etc.

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# 3. Security (Default security for all endpoints unless overridden)
security:
  - {}
